// Code generated by mockery v2.52.1. DO NOT EDIT.

package usecase

import (
	context "context"

	domain "github.com/Hao1995/short-url/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

type UseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCase) EXPECT() *UseCase_Expecter {
	return &UseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, createDto
func (_m *UseCase) Create(ctx context.Context, createDto *domain.CreateDto) (string, error) {
	ret := _m.Called(ctx, createDto)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateDto) (string, error)); ok {
		return rf(ctx, createDto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateDto) string); ok {
		r0 = rf(ctx, createDto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateDto) error); ok {
		r1 = rf(ctx, createDto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - createDto *domain.CreateDto
func (_e *UseCase_Expecter) Create(ctx interface{}, createDto interface{}) *UseCase_Create_Call {
	return &UseCase_Create_Call{Call: _e.mock.On("Create", ctx, createDto)}
}

func (_c *UseCase_Create_Call) Run(run func(ctx context.Context, createDto *domain.CreateDto)) *UseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.CreateDto))
	})
	return _c
}

func (_c *UseCase_Create_Call) Return(_a0 string, _a1 error) *UseCase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_Create_Call) RunAndReturn(run func(context.Context, *domain.CreateDto) (string, error)) *UseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *UseCase) Get(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UseCase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UseCase_Expecter) Get(ctx interface{}, id interface{}) *UseCase_Get_Call {
	return &UseCase_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *UseCase_Get_Call) Run(run func(ctx context.Context, id string)) *UseCase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UseCase_Get_Call) Return(_a0 string, _a1 error) *UseCase_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *UseCase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
