// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package domain

import (
	"errors"
	"fmt"
)

const (
	// GetRespStatusNormal is a GetRespStatus of type Normal.
	GetRespStatusNormal GetRespStatus = "Normal"
	// GetRespStatusNotFound is a GetRespStatus of type NotFound.
	GetRespStatusNotFound GetRespStatus = "NotFound"
	// GetRespStatusExpired is a GetRespStatus of type Expired.
	GetRespStatusExpired GetRespStatus = "Expired"
)

var ErrInvalidGetRespStatus = errors.New("not a valid GetRespStatus")

// String implements the Stringer interface.
func (x GetRespStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x GetRespStatus) IsValid() bool {
	_, err := ParseGetRespStatus(string(x))
	return err == nil
}

var _GetRespStatusValue = map[string]GetRespStatus{
	"Normal":   GetRespStatusNormal,
	"NotFound": GetRespStatusNotFound,
	"Expired":  GetRespStatusExpired,
}

// ParseGetRespStatus attempts to convert a string to a GetRespStatus.
func ParseGetRespStatus(name string) (GetRespStatus, error) {
	if x, ok := _GetRespStatusValue[name]; ok {
		return x, nil
	}
	return GetRespStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidGetRespStatus)
}

// MarshalText implements the text marshaller method.
func (x GetRespStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *GetRespStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseGetRespStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
